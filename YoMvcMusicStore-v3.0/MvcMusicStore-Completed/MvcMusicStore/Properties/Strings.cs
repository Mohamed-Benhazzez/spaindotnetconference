// <auto-generated />

namespace MvcMusicStore.Properties
{
	using System;
    using System.CodeDom.Compiler;
    using System.Globalization;
    using System.Resources;
    using System.Reflection;
    using System.Threading;

    // <summary>
    // Strongly-typed and parameterized string resources.
    // </summary>
    [GeneratedCode("Strings.tt", "1.0.0.0")]
    public static class Strings
    {
        // <summary>
        // A string like "miniprofiler"
        // </summary>
        public static string MiniProfilerCookie
        {
            get { return EntityRes.GetString(EntityRes.MiniProfilerCookie); }
        }

        // <summary>
        // A string like "1"
        // </summary>
        public static string MiniProfilerCookieOn
        {
            get { return EntityRes.GetString(EntityRes.MiniProfilerCookieOn); }
        }
    }

    // <summary>
    // Strongly-typed and parameterized exception factory.
    // </summary>
    [GeneratedCode("Strings.tt", "1.0.0.0")]
    internal static class Error
    {
        // <summary>
        // The exception that is thrown when the value of an argument is outside the allowable range of values as defined by the invoked method.
        // </summary>
        internal static Exception ArgumentOutOfRange(string paramName)
        {
            return new ArgumentOutOfRangeException(paramName);
        }

        // <summary>
        // The exception that is thrown when the author has yet to implement the logic at this point in the program. This can act as an exception based TODO tag.
        // </summary>
        internal static Exception NotImplemented()
        {
            return new NotImplementedException();
        }

        // <summary>
        // The exception that is thrown when an invoked method is not supported, or when there is an attempt to
        // read, seek, or write to a stream that does not support the invoked functionality.
        // </summary>
        internal static Exception NotSupported()
        {
            return new NotSupportedException();
        }
    }

    // <summary>
    // AutoGenerated resource class. Usage:
    // string s = EntityRes.GetString(EntityRes.MyIdenfitier);
    // </summary>
    [GeneratedCode("Strings.tt", "1.0.0.0")]
    internal sealed class EntityRes
    {
        internal const string MiniProfilerCookie = "MiniProfilerCookie";
        internal const string MiniProfilerCookieOn = "MiniProfilerCookieOn";

        private static EntityRes loader;
        private readonly ResourceManager resources;

        private EntityRes()
        {
            resources = new ResourceManager(
                "MvcMusicStore.Properties.Strings",
#if NET40
                typeof(System.Data.Entity.DbContext).Assembly);
#else
                typeof(MvcApplication).GetTypeInfo().Assembly);
#endif
        }

        private static EntityRes GetLoader()
        {
            if (loader == null)
            {
                var sr = new EntityRes();
                Interlocked.CompareExchange(ref loader, sr, null);
            }
            return loader;
        }

        private static CultureInfo Culture
        {
            get { return null /*use ResourceManager default, CultureInfo.CurrentUICulture*/; }
        }

        public static ResourceManager Resources
        {
            get { return GetLoader().resources; }
        }

        public static string GetString(string name, params object[] args)
        {
            var sys = GetLoader();
            if (sys == null)
            {
                return null;
            }

            var res = sys.resources.GetString(name, Culture);

            if (args != null
                && args.Length > 0)
            {
                return String.Format(CultureInfo.CurrentCulture, res, args);
            }
            else
            {
                return res;
            }
        }

        public static string GetString(string name)
        {
            var sys = GetLoader();
            if (sys == null)
            {
                return null;
            }
            return sys.resources.GetString(name, Culture);
        }

        public static string GetString(string name, out bool usedFallback)
        {
            // always false for this version of gensr
            usedFallback = false;
            return GetString(name);
        }

        public static object GetObject(string name)
        {
            var sys = GetLoader();
            if (sys == null)
            {
                return null;
            }
            return sys.resources.GetObject(name, Culture);
        }
    }
}
